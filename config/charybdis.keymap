#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define NUMBER  1
#define FN  2
#define HOTKEY  3

/ {
    behaviors {
        rht: repeatHoldTap {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEATHOLDTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
        };

        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            // hold, tap
        };

        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <130>;

            // quick-tap-ms = <200>;
            // require-prior-idle-ms = <150>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hm_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <130>;

            // quick-tap-ms = <200>;
            // require-prior-idle-ms = <150>;

            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40>;
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&mo 8>;

            // hold, tap, double_tap
        };

        td_space: td_space {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <85>;
            bindings = <&lt 1 SPACE>, <&kp SPACE>;

            // hold, tap, double_tap
        };

        td_bs: td_bs {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <85>;
            bindings = <&lt 5 BACKSPACE>, <&kp BACKSPACE>;

            // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>, <&to 4>;

            // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 9>;

            // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 6>, <&to 0>;
        };

        //td_grave: DoubleTap_Grave {
        //    compatible = "zmk,behavior-tap-dance";
        //    #binding-cells = <0>;
        //    bindings = <&kp GRAVE>, <&grave_macro>;
        //};
        //td_hyphen: DoubleTap_Hyphen {
        //    compatible = "zmk,behavior-tap-dance";
        //    #binding-cells = <0>;
        //    bindings = <&kp MINUS>, <&minus_macro>;
        //};
        //td_equals: DoubleTap_Equals {
        //    compatible = "zmk,behavior-tap-dance";
        //    #binding-cells = <0>;
        //    bindings = <&kp EQUAL>, <&equals_macro>;
        //};
        //td_home: DoubleTap_Home {
        //    compatible = "zmk,behavior-tap-dance";
        //   #binding-cells = <0>;
        //    bindings = <&kp FSLH>, <&home_macro>;
        //};
    };

    combos {
        compatible = "zmk,combos";

        minus {
            timeout-ms = <50>;
            key-positions = <37 40>; // KP: VB
            bindings = <&kp MINUS>;
            layers = <1 2 2 3 0 4>;
        };

        parentL {
            timeout-ms = <50>;
            key-positions = <9 8>;
            bindings = <&kp RPAR>;
            layers = <0 1 4 3 2>;
        };

        parentR {
            timeout-ms = <50>;
            key-positions = <7 8>; // KP: RT
            bindings = <&kp LEFT_PARENTHESIS>;
            layers = <1 2 2 3 0 4>;
        };

        rclick-l {
            bindings = <&mkp RCLK>;
            key-positions = <32 33>;
        };

        mClick-l {
            bindings = <&mkp MCLK>;
            key-positions = <31 32 33>;
        };

        lClick-l {
            bindings = <&mkp LCLK>;
            key-positions = <31 32>;
        };

        lClick-l {
            bindings = <&mkp LCLK>;
            key-positions = <27 28>;
        };

        rClick-r {
            bindings = <&mkp RCLK>;
            key-positions = <27 26>;
        };

        mClick-r {
            bindings = <&mkp MCLK>;
            key-positions = <27 28 26>;
        };
    };

    macros {
        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(NUMBER_0) &kp LA(NUMBER_1) &kp LA(NUMBER_2) &kp LA(N8)>;
            label = "EURO";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S &kp U &kp R &kp I &kp A &kp R &kp I &kp B &kp E &kp I &kp R &kp O &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&lt 3 ESC          &kp Q    &kp W                &kp E             &kp R                  &kp T                  &kp Y            &kp U                    &kp I              &kp O       &kp P          &kp BACKSPACE
&hm_left LCMD TAB  &lt 3 A  &hm_left LEFT_ALT S  &hm_left LCTRL D  &hm_left LEFT_SHIFT F  &kp G                  &kp H            &hm_right RIGHT_SHIFT J  &hm_right RCTRL K  &lt 3 L     &kp SEMICOLON  &kp SQT
&kp LSHFT          &kp Z    &kp X                &kp C             &kp V                  &kp B                  &kp N            &kp M                    &lt 3 COMMA        &kp PERIOD  &kp SLASH      &kp RSHFT
                                                 &kp LCTRL         &rht 1 SPACE           &lt 2 RIGHT_COMMAND    &lt 2 BACKSPACE  &lt 1 ENTER
            >;
        };

        number_layer {
            label = "NUMBER";
            bindings = <
&trans  &kp AT           &kp N7  &kp N8  &kp N9  &kp EQUAL    &kp DOLLAR  &euro           &kp UP_ARROW    &trans           &trans  &trans
&trans  &kp EXCLAMATION  &kp N4  &kp N5  &kp N6  &kp PLUS     &trans      &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &kp N0           &kp N1  &kp N2  &kp N3  &kp DOT      &email      &trans          &trans          &trans           &trans  &trans
                                 &trans  &trans  &trans       &trans      &trans
            >;
        };

        fn_layer {
            label = "FN";
            bindings = <
&bt BT_SEL 0    &bt BT_SEL 1  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&sys_reset      &trans        &kp F7   &kp F8   &kp F9   &out OUT_USB    &out OUT_USB  &trans        &trans        &trans        &trans        &sys_reset
&studio_unlock  &trans        &kp F4   &kp F5   &kp F6   &out OUT_BLE    &out OUT_BLE  &trans        &trans        &trans        &trans        &trans
                                       &kp F1   &kp F2   &kp F3          &trans        &trans
            >;
        };

        mouse {
            label = "HOTKEY";
            bindings = <
&trans  &trans  &trans  &trans     &trans     &kp C_VOLUME_UP      &msc SCRL_UP    &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &kp C_VOLUME_DOWN    &msc SCRL_DOWN  &trans     &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &kp C_MUTE           &trans          &trans     &trans  &trans  &trans  &trans
                        &mkp RCLK  &mkp LCLK  &mkp MCLK            &mkp RCLK       &mkp LCLK
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &kp UP_ARROW    &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans          &trans          &trans           &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
